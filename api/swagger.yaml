openapi: 3.0.0
info:
  title: User Management System API
  version: 1.0.0
  description: 综合用户认证与管理的完整解决方案
servers:
  - url: http://localhost:3001
    description: 本地开发环境
  - url: https://api.example.com
    description: 生产环境

paths:
  # ================= 账户服务接口 =================
  /accounts/register:
    post:
      tags: [Authentication]
      summary: 用户注册接口
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        "201":
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"

  /account/token:
    post:
      tags: [Authentication]
      summary: 获取访问令牌(JWT)
      description: 用户通过邮箱和密码获取JWT令牌，用于后续认证请求
      operationId: getAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: yourPassword123
      responses:
        "200":
          description: 认证成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/InvalidCredentials"
        "429":
          $ref: "#/components/responses/TooManyAttempts"
        "500":
          $ref: "#/components/responses/ServerError"

  # ================= 用户管理接口 =================
  /users:
    get:
      tags: [UserManagement]
      summary: 获取所有用户
      operationId: listUsers
      parameters:
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageNumber"
      responses:
        "200":
          description: 成功返回用户列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags: [UserManagement]
      summary: 创建新用户
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOperationResponse"
        "400":
          $ref: "#/components/responses/InvalidRequest"

  /users/{id}:
    get:
      tags: [UserManagement]
      summary: 获取用户详情
      operationId: getUserById
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: 用户详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags: [UserManagement]
      summary: 更新用户信息
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOperationResponse"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags: [UserManagement]
      summary: 删除用户
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  # ================= 通用参数 =================
  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: 用户唯一标识符
    PageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    PageNumber:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1

  # ================= 数据模型 =================
  schemas:
    User:
      type: object
      required: [id, name, email]
      properties:
        id:
          type: integer
          format: int64
          example: 1001
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: 张三
        email:
          type: string
          format: email
          example: zhangsan@example.com
        createdAt:
          type: string
          format: date-time
          example: "2023-08-20T09:30:00Z"

    RegistrationRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          $ref: "#/components/schemas/User/properties/name"
        email:
          $ref: "#/components/schemas/User/properties/email"
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 32

    RegistrationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 注册成功
        user:
          $ref: "#/components/schemas/User"

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600
        user:
          type: object
          properties:
            id:
              type: integer
              example: 12345
            email:
              type: string
              example: user@example.com
            name:
              type: string
              example: John Doe

    UserCreateRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/RegistrationRequest"
        - type: object
          properties:
            role:
              type: string
              enum: [user, admin]
              default: user

    UserUpdateRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/User/properties/name"
        email:
          $ref: "#/components/schemas/User/properties/email"
        password:
          $ref: "#/components/schemas/RegistrationRequest/properties/password"

    UserOperationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 操作成功
        user:
          $ref: "#/components/schemas/User"

    BasicResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 操作成功

  # ================= 标准响应 =================
  responses:
    InvalidRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 参数校验失败
              errors:
                type: array
                items:
                  type: string
                example: ["邮箱格式不正确"]

    InvalidCredentials:
      description: 认证失败
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Invalid credentials

    TooManyAttempts:
      description: 请求过于频繁
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Too many attempts

    ServerError:
      description: 服务器错误
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Internal server error

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: 用户不存在
